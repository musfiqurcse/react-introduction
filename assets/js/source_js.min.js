/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function testVar() {
    var a = 50;
    if (true) {
        var a = 20;
    }
    console.log(a);
}
testVar();

function testLet() {
    var a = 50;
    if (true) {
        var _a = 30;
        console.log(_a);
    }
    console.log(a);
}
console.log('TeST Let');
testLet();

//Uses of let and others

/*
Uses of Classes
*/

var User = function () {
    function User(username, email, password) {
        _classCallCheck(this, User);

        this.username = username;
        this.email = email;
        this.password = password;
    }
    // Methods are function which are belongs to a class


    _createClass(User, [{
        key: 'register',
        value: function register() {
            console.log(this.username + ' is now registered');
        }
    }], [{
        key: 'countUser',
        value: function countUser() {
            console.log('There are 50 users');
        }
    }]);

    return User;
}();

var bob = new User('bob ', 'bob@mailinator.com', '123456');

bob.register();

User.countUser();

var Member = function (_User) {
    _inherits(Member, _User);

    function Member(username, email, password, memberPackage) {
        _classCallCheck(this, Member);

        var _this = _possibleConstructorReturn(this, (Member.__proto__ || Object.getPrototypeOf(Member)).call(this, username, email, password));

        _this.package = memberPackage;
        return _this;
    }

    _createClass(Member, [{
        key: 'getPackage',
        value: function getPackage() {
            console.log(this.username + ' - ' + this.password + ' - ' + this.member);
        }
    }]);

    return Member;
}(User);

var mike = new Member('mike', 'mike@gmail.com', '12345', 'no-bd');
mike.getPackage();
var name = ' testing';

function makeUppercase(word) {
    return word.toUpperCase();
}

var template = "<h1> Hello </h1> This is a simple template in JavaScript";
var extra = '\nBack ticket added ' + name + '\n' + makeUppercase('Hello') + '\n';
document.getElementById('template').innerHTML = extra;

/***/ })
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAgYjM1ZjM2OTVjZTM5ODQ4ZGZkNzYiLCJ3ZWJwYWNrOi8vLy4vYXNzZXRzL2pzL3NvdXJjZV9qcy5qcyJdLCJuYW1lcyI6WyJ0ZXN0VmFyIiwiYSIsImNvbnNvbGUiLCJsb2ciLCJ0ZXN0TGV0IiwiVXNlciIsInVzZXJuYW1lIiwiZW1haWwiLCJwYXNzd29yZCIsImJvYiIsInJlZ2lzdGVyIiwiY291bnRVc2VyIiwiTWVtYmVyIiwibWVtYmVyUGFja2FnZSIsInBhY2thZ2UiLCJtZW1iZXIiLCJtaWtlIiwiZ2V0UGFja2FnZSIsIm5hbWUiLCJtYWtlVXBwZXJjYXNlIiwid29yZCIsInRvVXBwZXJDYXNlIiwidGVtcGxhdGUiLCJleHRyYSIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJpbm5lckhUTUwiXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsbUNBQTJCLDBCQUEwQixFQUFFO0FBQ3ZELHlDQUFpQyxlQUFlO0FBQ2hEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDhEQUFzRCwrREFBK0Q7O0FBRXJIO0FBQ0E7O0FBRUE7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDN0RBLFNBQVNBLE9BQVQsR0FBa0I7QUFDZCxRQUFJQyxJQUFFLEVBQU47QUFDQSxRQUFHLElBQUgsRUFBUTtBQUNKLFlBQUlBLElBQUUsRUFBTjtBQUNIO0FBQ0RDLFlBQVFDLEdBQVIsQ0FBWUYsQ0FBWjtBQUNIO0FBQ0REOztBQUVBLFNBQVNJLE9BQVQsR0FBa0I7QUFDZCxRQUFJSCxJQUFFLEVBQU47QUFDQSxRQUFHLElBQUgsRUFBUTtBQUNOLFlBQUtBLEtBQUUsRUFBUDtBQUNFQyxnQkFBUUMsR0FBUixDQUFZRixFQUFaO0FBQ0g7QUFDREMsWUFBUUMsR0FBUixDQUFZRixDQUFaO0FBQ0g7QUFDREMsUUFBUUMsR0FBUixDQUFZLFVBQVo7QUFDQUM7O0FBRUE7O0FBRUE7Ozs7SUFJTUMsSTtBQUNGLGtCQUFZQyxRQUFaLEVBQXFCQyxLQUFyQixFQUEyQkMsUUFBM0IsRUFBb0M7QUFBQTs7QUFDNUIsYUFBS0YsUUFBTCxHQUFnQkEsUUFBaEI7QUFDQSxhQUFLQyxLQUFMLEdBQVdBLEtBQVg7QUFDQSxhQUFLQyxRQUFMLEdBQWdCQSxRQUFoQjtBQUNQO0FBQ0Q7Ozs7O21DQUtVO0FBQ05OLG9CQUFRQyxHQUFSLENBQVksS0FBS0csUUFBTCxHQUFnQixvQkFBNUI7QUFDSDs7O29DQU5pQjtBQUNkSixvQkFBUUMsR0FBUixDQUFZLG9CQUFaO0FBQ0g7Ozs7OztBQU9MLElBQUlNLE1BQUksSUFBSUosSUFBSixDQUFTLE1BQVQsRUFBaUIsb0JBQWpCLEVBQXNDLFFBQXRDLENBQVI7O0FBRUFJLElBQUlDLFFBQUo7O0FBRUFMLEtBQUtNLFNBQUw7O0lBRU1DLE07OztBQUNGLG9CQUFZTixRQUFaLEVBQXFCQyxLQUFyQixFQUEyQkMsUUFBM0IsRUFBb0NLLGFBQXBDLEVBQWtEO0FBQUE7O0FBQUEsb0hBQ3hDUCxRQUR3QyxFQUMvQkMsS0FEK0IsRUFDekJDLFFBRHlCOztBQUU5QyxjQUFLTSxPQUFMLEdBQWFELGFBQWI7QUFGOEM7QUFHakQ7Ozs7cUNBQ1c7QUFDUlgsb0JBQVFDLEdBQVIsQ0FBWSxLQUFLRyxRQUFMLEdBQWdCLEtBQWhCLEdBQXVCLEtBQUtFLFFBQTVCLEdBQXNDLEtBQXRDLEdBQTRDLEtBQUtPLE1BQTdEO0FBQ0g7Ozs7RUFQZ0JWLEk7O0FBU3JCLElBQUlXLE9BQU8sSUFBSUosTUFBSixDQUFXLE1BQVgsRUFBbUIsZ0JBQW5CLEVBQW9DLE9BQXBDLEVBQTRDLE9BQTVDLENBQVg7QUFDQUksS0FBS0MsVUFBTDtBQUNBLElBQUlDLE9BQU0sVUFBVjs7QUFFQSxTQUFTQyxhQUFULENBQXVCQyxJQUF2QixFQUE0QjtBQUN4QixXQUFPQSxLQUFLQyxXQUFMLEVBQVA7QUFDSDs7QUFFRCxJQUFJQyxXQUFXLDBEQUFmO0FBQ0EsSUFBSUMsaUNBRWdCTCxJQUZoQixVQUlBQyxjQUFjLE9BQWQsQ0FKQSxPQUFKO0FBT0FLLFNBQVNDLGNBQVQsQ0FBd0IsVUFBeEIsRUFBb0NDLFNBQXBDLEdBQWdESCxLQUFoRCxDIiwiZmlsZSI6InNvdXJjZV9qcy5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHtcbiBcdFx0XHRcdGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gXHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuIFx0XHRcdFx0Z2V0OiBnZXR0ZXJcbiBcdFx0XHR9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAwKTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyB3ZWJwYWNrL2Jvb3RzdHJhcCBiMzVmMzY5NWNlMzk4NDhkZmQ3NiIsImZ1bmN0aW9uIHRlc3RWYXIoKXtcbiAgICB2YXIgYT01MCBcbiAgICBpZih0cnVlKXtcbiAgICAgICAgdmFyIGE9MjBcbiAgICB9XG4gICAgY29uc29sZS5sb2coYSlcbn1cbnRlc3RWYXIoKVxuXG5mdW5jdGlvbiB0ZXN0TGV0KCl7XG4gICAgbGV0IGE9NTBcbiAgICBpZih0cnVlKXtcbiAgICAgIGxldCAgYT0zMFxuICAgICAgICBjb25zb2xlLmxvZyhhKVxuICAgIH1cbiAgICBjb25zb2xlLmxvZyhhKVxufVxuY29uc29sZS5sb2coJ1RlU1QgTGV0JylcbnRlc3RMZXQoKVxuXG4vL1VzZXMgb2YgbGV0IGFuZCBvdGhlcnNcblxuLypcblVzZXMgb2YgQ2xhc3Nlc1xuKi9cblxuY2xhc3MgVXNlcntcbiAgICBjb25zdHJ1Y3Rvcih1c2VybmFtZSxlbWFpbCxwYXNzd29yZCl7XG4gICAgICAgICAgICB0aGlzLnVzZXJuYW1lID0gdXNlcm5hbWVcbiAgICAgICAgICAgIHRoaXMuZW1haWw9ZW1haWxcbiAgICAgICAgICAgIHRoaXMucGFzc3dvcmQgPSBwYXNzd29yZFxuICAgIH1cbiAgICAvLyBNZXRob2RzIGFyZSBmdW5jdGlvbiB3aGljaCBhcmUgYmVsb25ncyB0byBhIGNsYXNzXG4gICAgc3RhdGljIGNvdW50VXNlcigpe1xuICAgICAgICBjb25zb2xlLmxvZygnVGhlcmUgYXJlIDUwIHVzZXJzJylcbiAgICB9XG5cbiAgICByZWdpc3Rlcigpe1xuICAgICAgICBjb25zb2xlLmxvZyh0aGlzLnVzZXJuYW1lICsgJyBpcyBub3cgcmVnaXN0ZXJlZCcpXG4gICAgfVxuXG59XG5sZXQgYm9iPW5ldyBVc2VyKCdib2IgJywgJ2JvYkBtYWlsaW5hdG9yLmNvbScsJzEyMzQ1NicpO1xuXG5ib2IucmVnaXN0ZXIoKVxuXG5Vc2VyLmNvdW50VXNlcigpO1xuXG5jbGFzcyBNZW1iZXIgZXh0ZW5kcyBVc2Vye1xuICAgIGNvbnN0cnVjdG9yKHVzZXJuYW1lLGVtYWlsLHBhc3N3b3JkLG1lbWJlclBhY2thZ2Upe1xuICAgICAgICBzdXBlcih1c2VybmFtZSxlbWFpbCxwYXNzd29yZCk7XG4gICAgICAgIHRoaXMucGFja2FnZT1tZW1iZXJQYWNrYWdlXG4gICAgfVxuICAgIGdldFBhY2thZ2UoKXtcbiAgICAgICAgY29uc29sZS5sb2codGhpcy51c2VybmFtZSArICcgLSAnKyB0aGlzLnBhc3N3b3JkKyAnIC0gJyt0aGlzLm1lbWJlcilcbiAgICB9XG59XG5sZXQgbWlrZSA9IG5ldyBNZW1iZXIoJ21pa2UnLCAnbWlrZUBnbWFpbC5jb20nLCcxMjM0NScsJ25vLWJkJylcbm1pa2UuZ2V0UGFja2FnZSgpXG5sZXQgbmFtZT0gJyB0ZXN0aW5nJ1xuXG5mdW5jdGlvbiBtYWtlVXBwZXJjYXNlKHdvcmQpe1xuICAgIHJldHVybiB3b3JkLnRvVXBwZXJDYXNlKCk7XG59XG5cbmxldCB0ZW1wbGF0ZSA9IFwiPGgxPiBIZWxsbyA8L2gxPiBUaGlzIGlzIGEgc2ltcGxlIHRlbXBsYXRlIGluIEphdmFTY3JpcHRcIlxubGV0IGV4dHJhID0gXG5gXG5CYWNrIHRpY2tldCBhZGRlZCAke25hbWV9XG4ke1xuICAgIG1ha2VVcHBlcmNhc2UoJ0hlbGxvJylcbn1cbmBcbmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0ZW1wbGF0ZScpLmlubmVySFRNTCA9IGV4dHJhXG5cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2Fzc2V0cy9qcy9zb3VyY2VfanMuanMiXSwic291cmNlUm9vdCI6IiJ9